 int henglie ( int argc , char* argv[]) 
 {
   	GtkWidget *window;  
 	GtkWidget *box;  
 	GtkWidget *button;  
 	gchar *title = "排列按钮" ; 
     
 	gtk_init(&argc,&argv);  
 	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);  
 	g_signal_connect(G_OBJECT(window),"delete_event", 
 							G_CALLBACK(gtk_main_quit),NULL); 
 	gtk_window_set_title(GTK_WINDOW(window),title);  
 	gtk_window_set_position(GTK_WINDOW(window),GTK_WIN_POS_CENTER);  
 	gtk_container_set_border_width(GTK_CONTAINER(window),40);  
     gtk_window_set_default_size(GTK_WINDOW(window),500,500);
    
 	box = gtk_hbox_new(FALSE,0); 
 	gtk_container_add(GTK_CONTAINER(window),box);  

 	button = gtk_button_new_with_label("按钮一"); 

     g_signal_connect(G_OBJECT(button),"clicked",
                 G_CALLBACK(on_button_clicked),(gpointer)count);
     //将button添加到控件中
     gtk_container_add(GTK_CONTAINER(window),button);
     //第一true是扩展，第二个true是扩充，3是与前一控件的间隔

     //向盒状容器添加并排列控件
 	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,3);  
 	button = gtk_button_new_with_label("按");  
 	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,3);   
 	button = gtk_button_new_with_label("钮");  
 	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,3);  
 	button = gtk_button_new_with_label("二");  
 	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,3); 

   	gtk_widget_show_all(window);  
 	gtk_main();  
 	return FALSE; 
 }

 void on_button_clicked (GtkWidget *button,gpointer userdata)
 {
     //g_print和printf语法格式一致
     g_print("你好,这是Hello功能的测试. ");
     //g_print("Hello . This is a test . ");
     g_print("%d\n",(gint)userdata);
    //g_print("%d\n",count);
     count = count + 1 ;
 }


 【网格】
 int main(int argc, char* argv[])
{
    GtkWidget* window;
    GtkWidget* table;
    GtkWidget* button;
    GtkWidget* frame;

    gtk_init(&argc,&argv);
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);

    gtk_window_set_title(GTK_WINDOW(window),"格状容器");
    gtk_window_set_default_size(GTK_WINDOW(window),200,300);
    g_signal_connect(G_OBJECT(window),"destroy",
                            G_CALLBACK(gtk_main_quit),NULL);
    gtk_container_set_border_width(GTK_CONTAINER(window),20);

    frame = gtk_frame_new("请注意下列按钮的排列");
    gtk_container_add(GTK_CONTAINER(window),frame);
    //创建格状容器，行数，列数，是否均匀分布
    table = gtk_table_new(4,4,FALSE);

    gtk_container_set_border_width(GTK_CONTAINER(table),10);

    //容器中子控件的行间隔和列间隔
    gtk_table_set_row_spacings(GTK_TABLE(table),5);
    gtk_table_set_col_spacings(GTK_TABLE(table),5);
    gtk_container_add(GTK_CONTAINER(frame),table);

    button = gtk_button_new();
    //GTK_FILL可填充的
    //第2-6个表示位置，最后四个是属性和控件间隔
    gtk_table_attach(GTK_TABLE(table),button,0,1,0,1,
                                    GTK_FILL,GTK_FILL,0,0);
    //0,0-1,1
    //创建一个不显示内容的空按钮
    //最后两个数为和周围控件之间的距离
    button = gtk_button_new_with_label("a");//_with_label("1,3,1,3");
    gtk_table_attach(GTK_TABLE(table),button,1,3,1,3,
                                    GTK_FILL,GTK_FILL,15,15);
    //1,1-3,3
    button = gtk_button_new();//_with_label("0,1,1,3");
    gtk_table_attach_defaults(GTK_TABLE(table),button,0,1,1,3);
    //0,1-1,3
    button = gtk_button_new(); //_with_label("1,3,0,1");
    gtk_table_attach_defaults(GTK_TABLE(table),button,1,3,0,1);
    //1,0-3,1
    button = gtk_button_new();//_with_label("0,4,3,4");
    gtk_table_attach_defaults(GTK_TABLE(table),button,0,4,3,4);
    //0,3-4,4
    button = gtk_button_new();//_with_label("3,4,0,3");
    gtk_table_attach_defaults(GTK_TABLE(table),button,3,4,0,3);
    //3,0-4,3
    gtk_widget_show_all(window);
    gtk_main();
    return FALSE;
}


void on_button_clicked (GtkWidget* button,gpointer data)
{
//g_print("按钮 %s ",(gchar*)data);
    g_print("Button %s is pressed.\n",(gchar*)data);
//g_print("被按了一下. \n");
}

//创建自己按钮的函数
GtkWidget* create_button1 (void)
{
    GtkWidget* box;
    GtkWidget* image;
    GtkWidget* label;   
    GtkWidget* button;
    char* title = "红苹果";

    image = gtk_image_new_from_file("red_apple.jpg");
    label = gtk_label_new(title);

    //true均匀放置，false不均匀放置
    box = gtk_vbox_new(FALSE,2);

    gtk_container_set_border_width(GTK_CONTAINER(box),5);
    //向盒装容器中添加控件，不扩展，不填充，和前一控件，间隔是3
    //讲图片和文字添加到容器中
    gtk_box_pack_start(GTK_BOX(box),image,FALSE,FALSE,3);
    gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,3);
    //显示控件
    gtk_widget_show(image);
    gtk_widget_show(label);
    button = gtk_button_new();
    gtk_container_add(GTK_CONTAINER(button),box);
    gtk_widget_show(box);
    return button ;
}

GtkWidget* create_button2 (void)
{
    GtkWidget* box;
    GtkWidget* image;
    GtkWidget* label;
    GtkWidget* button;
    char* title = "小蘑菇";
    image = gtk_image_new_from_file("gnome-gmush.png");
    label = gtk_label_new(title);
    box = gtk_hbox_new(FALSE,2);
    gtk_container_set_border_width(GTK_CONTAINER(box),5);
    gtk_box_pack_start(GTK_BOX(box),image,FALSE,FALSE,3);
    gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,3);
    //显示控件
    gtk_widget_show(image);
    gtk_widget_show(label);
    button = gtk_button_new();
    gtk_container_add(GTK_CONTAINER(button),box);
    gtk_widget_show(box);
    return button ;
}
//主函数
int main(int argc, char *argv[])
{
    GtkWidget* window;
    GtkWidget* box;
    GtkWidget* button1;
    GtkWidget* button2;
    GtkWidget* button3;
    GtkWidget* button4;
    gchar* title = "带图像和快捷键的按钮";
    gchar* b1 = "Red apple";//"红苹果"
    gchar* b2 = "Small mushroom";//"小蘑菇"
    gchar* b3 = "Short key";//"快捷键"
    gchar* b4 = "OK";//"确 认"

    gtk_init(&argc,&argv);
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window),title);
    gtk_container_set_border_width(GTK_CONTAINER(window),20);
    g_signal_connect(G_OBJECT(window),"destroy",
                            G_CALLBACK(gtk_main_quit),NULL);
    //不均匀分布，子控件之间的距离是0
    box = gtk_hbox_new(FALSE,0);
    gtk_container_add(GTK_CONTAINER(window),box);

    button1 = create_button1();
    g_signal_connect(G_OBJECT(button1),"clicked",
                 G_CALLBACK(on_button_clicked),(gpointer)b1);
    gtk_box_pack_start(GTK_BOX(box),button1,FALSE,FALSE,5);
    
    button2 = create_button2();
    g_signal_connect(G_OBJECT(button2),"clicked",
                G_CALLBACK(on_button_clicked),(gpointer)b2);
    //将按钮放到box中
    gtk_box_pack_start(GTK_BOX(box),button2,FALSE,FALSE,5);

    button3 = gtk_button_new_with_mnemonic("快捷键(_H)");
    g_signal_connect(G_OBJECT(button3),"clicked",
                G_CALLBACK(on_button_clicked),(gpointer)b3);
    gtk_box_pack_start(GTK_BOX(box),button3,FALSE,FALSE,5);
    
    button4 = gtk_button_new_from_stock(GTK_STOCK_OK);
    g_signal_connect(G_OBJECT(button4),"clicked",
                G_CALLBACK(on_button_clicked),(gpointer)b4);

    gtk_box_pack_start(GTK_BOX(box),button4,FALSE,FALSE,5);
    
    gtk_widget_show_all(window);
    gtk_main();
    return FALSE ;
}


/*
 * @Copyright: CS of BIT
 * @Author: 王可欣
 * @File name: 
 * @Version: 
 * @Date: 2019-08-31 05:28:33 -0700
 * @LastEditTime: 2019-08-31 05:47:56 -0700
 * @LastEditors: 
 * @Description: 
 */


#include "head.h"
static GtkWidget* dialog = NULL;
//窗口中可见的文本框
static GtkTextBuffer *message_buffer;


GtkWidget* create_view (gchar* filename)
{
    //创建新的图像窗口
    GtkWidget* image;
    GtkWidget *window;
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window),filename);
    gtk_container_set_border_width(GTK_CONTAINER(window),10);
    image = gtk_image_new_from_file(filename);
    gtk_container_add(GTK_CONTAINER(window),image);
    gtk_widget_show_all(window);
    return window;
}


/**
 * @Author: 王可欣
 * @Description: 防止on_drag_data_received调用两次
 * @Param: 
 * @Return: 
 */
static gboolean on_drag_drop()
{    
    return TRUE;
}
/**
 * @Author: 王可欣
 * @Description: 识别拖拽进来的文件
 * @Param: 
 * @Return: 
 */
static void on_drag_data_received(GtkWidget *widget, GdkDragContext *context,
        gint x,gint y,GtkSelectionData *data,guint info,guint time,gpointer user_data)
{    
    GdkAtom atom=gtk_selection_data_get_data_type(data);    
    if(gtk_targets_include_uri(&atom,1))
    {        
        gchar **uris=gtk_selection_data_get_uris(data);       
        gint i=0;        
        while(uris[i]!=NULL)
        {            
            //文件储存地址
            g_printf("%s\n",uris[i]);            
            i++;        
        }        
        //gtk_entry_set_text(GTK_ENTRY(widget),uris[0]);        
        /* 使用默认程序打开 */        
        //g_app_info_launch_default_for_uri(uris[0],NULL,NULL);        
        //释放地址
        g_strfreev(uris);    
    }    
    gtk_drag_finish(context,TRUE,TRUE,time);
}

/**
 * @Author: 王可欣
 * @Description: 文件选择框点击取消
 * @Param: 
 * @Return: 
 */
void on_cancel (GtkButton *button,gpointer data)
{
    gtk_widget_destroy(dialog);
}

/**
 * @Author: 王可欣
 * @Description: 文件选择框中点击确定
 * @Param: 
 * @Return: 
 */
void on_ok (GtkButton* button, gpointer data)
{
    //filename是文件路径
    const char* filename;
    GtkWidget* window;
    filename = gtk_file_selection_get_filename(GTK_FILE_SELECTION(data));
    g_printf("%s\n",filename);
    // window = create_view(filename);
    // gtk_widget_show(window);
}

/**
 * @Author: 王可欣
 * @Description: 点击选择图片的按钮
 * @Param: 
 * @Return: 
 * @Throw: 
 */
void on_clicked (GtkButton *button, gpointer data)
{
    //函数创建文件选择的窗口
    dialog = gtk_file_selection_new("请选择一个文件");
    g_signal_connect(G_OBJECT(dialog),"destroy",
                G_CALLBACK(gtk_widget_destroy),dialog);
    g_signal_connect(G_OBJECT(GTK_FILE_SELECTION(dialog)->ok_button),
                                        "clicked", G_CALLBACK(on_ok),dialog);
    g_signal_connect_swapped(G_OBJECT(
                    GTK_FILE_SELECTION(dialog)->ok_button),
                    "clicked",G_CALLBACK(on_cancel),NULL);
    g_signal_connect(G_OBJECT(
                    GTK_FILE_SELECTION(dialog)->cancel_button),
                    "clicked", G_CALLBACK(on_cancel),NULL);
    
    gtk_widget_show(dialog);
}


/**
 * @Author: 王可欣
 * @Description: 创建打开文件挂管理器的按钮
 * @Param: 
 * @Return: 
 * @Throw: 
 */
GtkWidget* CreateImageBtn(void)
{
    GtkWidget* image;
    GtkWidget* button;
    image = gtk_image_new_from_file("/home/new/chat_application/pic/document.png");
    
    // gtk_container_add(GTK_CONTAINER(box),image);
   // gtk_box_pack_start(GTK_BOX(box),image,FALSE,FALSE,3);
    
    button = gtk_button_new();
    gtk_container_add(GTK_CONTAINER(button),image);
    gtk_widget_set_size_request(button,40,40);
    gtk_widget_show(image);
    gtk_widget_show(button);

    return button ;

    // GdkPixbuf *src = gdk_pixbuf_new_from_file("./home/new/chat_application/pic/document.png", NULL);// 读取原图片	
	// GdkPixbuf *dst = gdk_pixbuf_scale_simple(src, 50, 50, GDK_INTERP_BILINEAR);
    // image = gtk_image_new_from_pixbuf(dst);	// 通过pixbuf创建图片控件
	// g_object_unref(src);	// pixbuf使用完，需要人为释放资源
	// g_object_unref(dst);
	// button = gtk_button_new();
    // gtk_container_add(GTK_CONTAINER(button),box);
    // gtk_widget_show(box);
    // return button ;
}

/**
 * @Author: 王可欣
 * @Description: 创建主页面
 * @Param: 
 * @Return: 
 */
GtkWidget* create_window(void)
{
    GtkWidget *window;
    GtkWidget *vbox;
    GtkWidget *image, *button,*message;

    GtkWidget* window;
    GtkWidget* scrolledwin;
    gtk_window_new(GTK_WINDOW_TOPLEVEL);
    
    gtk_window_set_title(GTK_WINDOW(window),"图像查看软件");
    gtk_window_set_position(GTK_WINDOW(window),GTK_WIN_POS_CENTER);
    gtk_container_set_border_width(GTK_CONTAINER(window),10);
    gtk_window_set_default_size(GTK_WINDOW(window),500,500);
    
    vbox = gtk_vbox_new(FALSE,0);
    gtk_container_add(GTK_CONTAINER(window),vbox);
    
    button=CreateImageBtn();
    gtk_box_pack_start(GTK_BOX(vbox),button,FALSE,FALSE,7);
    g_signal_connect(G_OBJECT(button),"clicked",
                        G_CALLBACK(on_clicked),NULL);

    //创建文本框
    message=gtk_text_view_new();
    gtk_widget_set_size_request(message,400,250); 
    gtk_box_pack_start(GTK_BOX(vbox),message,FALSE,FALSE,0); 

    message_buffer=gtk_text_view_get_buffer(GTK_TEXT_VIEW(message));
     
    //拖拽
    GtkTargetEntry targets={"text/uri-list", GTK_TARGET_OTHER_APP,1 };    
    gtk_drag_dest_set(message, GTK_DEST_DEFAULT_DROP, &targets,1, GDK_ACTION_COPY);   
    g_signal_connect(G_OBJECT(message),"drag-data-received",G_CALLBACK(on_drag_data_received),NULL);    
    g_signal_connect(G_OBJECT(message),"drag-drop",G_CALLBACK(on_drag_drop),NULL);

    return window;
}

int main ( int argc , char* argv[])
{
    GtkWidget *window;
   
    gtk_init(&argc,&argv);
    window = CreateWindow();
    g_signal_connect(G_OBJECT(window),"delete_event",
    G_CALLBACK(gtk_main_quit),NULL);
    gtk_widget_show_all(window);
    gtk_main();
    return FALSE;
}


void enter_button(GtkWidget *widget, gpointer data)
{
	g_print("enter button\n");
}
void leave_button(GtkWidget *widget, gpointer data)
{
	g_print("leave button\n");
}
// int main(int argc, char* argv[])
// {
// 	GtkWidget *window;
// 	GtkWidget *fixed;
// 	GtkWidget *button;
 
// 	gtk_init(&argc, &argv);
 
// 	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
// 	gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
// 	gtk_window_set_default_size(GTK_WINDOW(window), 250,200);
// 	gtk_window_set_title(GTK_WINDOW(window), "GtkFixed");
 
// 	fixed = gtk_fixed_new();
// 	gtk_container_add(GTK_CONTAINER(window), fixed);
 
// 	button = gtk_button_new_with_label("Button");
// 	gtk_fixed_put(GTK_FIXED(fixed), button, 150, 50);
// 	gtk_widget_set_size_request(button, 80, 35);
	
// 	g_signal_connect_swapped(GTK_WINDOW(window), "destroy", G_CALLBACK(gtk_main_quit), NULL);
// 	g_signal_connect(GTK_BUTTON(button), "enter", G_CALLBACK(enter_button), NULL);
// 	g_signal_connect(GTK_BUTTON(button), "leave", G_CALLBACK(leave_button), NULL);
// 	gtk_widget_show_all(window);
// 	gtk_main();
// 	return 0;
// }













